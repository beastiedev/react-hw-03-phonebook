{"version":3,"sources":["components/ContactForm/index.js","components/ContactItem/index.jsx","components/ContactList/index.jsx","components/Filter/index.jsx","App.js","serviceWorker.js","index.js"],"names":["ContactForm","state","name","number","handleSubmit","e","preventDefault","props","onSubmit","id","uuid_v4","setState","handleNameInputChange","target","value","handleNumberInputChange","className","this","type","onChange","Component","ContactItem","item","onDelete","onClick","ContactList","contacts","map","key","defaultProps","Filter","filter","handleOnFilter","onFilter","App","LOCAL_STORAGE_KEY","handleAddContact","contact","contactExists","alert","storeContacts","handleDeleteContact","newContact","length","RegExp","test","localStorage","setItem","JSON","stringify","getItem","parse","restoreContacts","getContacts","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.356f38fa.chunk.js","sourcesContent":["import React from \"react\";\nimport { Component } from \"react\";\nimport { v4 as uuid_v4 } from \"uuid\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (!this.state.name) {\n      return;\n    }\n    this.props.onSubmit({\n      id: uuid_v4(),\n      name: this.state.name,\n      number: this.state.number,\n    });\n\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  handleNameInputChange = (e) => this.setState({ name: e.target.value });\n\n  handleNumberInputChange = (e) => this.setState({ number: e.target.value });\n\n  render() {\n    return (\n      <form className=\"contact-form\" onSubmit={this.handleSubmit}>\n        <p>Name</p>\n        <p>\n          <input\n            name=\"name\"\n            type=\"text\"\n            onChange={this.handleNameInputChange}\n            value={this.state.name}\n          />\n        </p>\n        <p>Number</p>\n        <p>\n          <input\n            name=\"number\"\n            type=\"text\"\n            onChange={this.handleNumberInputChange}\n            value={this.state.number}\n          />\n        </p>\n        <p>\n          <button>Add contact</button>\n        </p>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import React from \"react\";\n\nconst ContactItem = ({ item, onDelete }) => {\n  return (\n    <li>\n      {item.name}: {item.number}{\" \"}\n      <button onClick={() => onDelete(item.id)}>delete</button>\n    </li>\n  );\n};\n\nexport default ContactItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ContactItem from \"../ContactItem\";\n\nconst ContactList = ({ contacts, onDelete }) => (\n  <>\n    <ul className=\"contact-list\">\n      {contacts.map((item) => (\n        <ContactItem key={item.id} item={item} onDelete={onDelete} />\n      ))}\n    </ul>\n  </>\n);\n\nContactList.propTypes = {\n  onDelete: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOfType([PropTypes.string]),\n      name: PropTypes.string,\n    })\n  ),\n};\n\nContactList.defaultProps = {\n  contacts: [],\n};\n\nexport default ContactList;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Filter extends Component {\n  state = {\n    filter: \"\",\n  };\n\n  handleOnFilter = (e) =>\n    this.setState({ filter: e.target.value }, () => {\n      this.props.onFilter(this.state.filter);\n    });\n\n  render() {\n    return (\n      <>\n        <div>Find contacts by name</div>\n        <input\n          type=\"text\"\n          name=\"filter\"\n          value={this.state.filter}\n          onChange={this.handleOnFilter}\n        />\n      </>\n    );\n  }\n}\n\nFilter.propTypes = {\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ContactForm from \"./components/ContactForm\";\nimport ContactList from \"./components/ContactList\";\nimport Filter from \"./components/Filter\";\n\nclass App extends Component {\n  LOCAL_STORAGE_KEY = \"contactsList\";\n  state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  };\n\n  handleAddContact = (contact) => {\n    if (this.contactExists(contact)) {\n      return alert(`${contact.name} is already in contacts`);\n    }\n    this.setState(\n      ({ contacts }) => ({ contacts: [...contacts, contact] }),\n      this.storeContacts\n    );\n  };\n\n  handleDeleteContact = (id) => {\n    this.setState(\n      ({ contacts }) => ({\n        contacts: contacts.filter((item) => item.id !== id),\n      }),\n      this.storeContacts\n    );\n  };\n\n  handleOnFilter = (filter) => {\n    this.setState({ filter: filter });\n  };\n\n  contactExists(newContact) {\n    return !!this.state.contacts.filter(\n      (contact) => contact.name === newContact.name\n    ).length;\n  }\n\n  getContacts() {\n    if (this.state.filter) {\n      return this.state.contacts.filter((contact) =>\n        new RegExp(`${this.state.filter}`, \"i\").test(contact.name)\n      );\n    } else {\n      return this.state.contacts;\n    }\n  }\n\n  storeContacts() {\n    localStorage.setItem(\n      this.LOCAL_STORAGE_KEY,\n      JSON.stringify(this.state.contacts)\n    );\n  }\n\n  restoreContacts() {\n    if (localStorage.getItem(this.LOCAL_STORAGE_KEY)) {\n      const contacts = JSON.parse(localStorage.getItem(this.LOCAL_STORAGE_KEY));\n      this.setState({ contacts });\n    }\n  }\n\n  componentDidMount() {\n    this.restoreContacts();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={this.handleAddContact} />\n\n        <h2>Contacts</h2>\n        <Filter onFilter={this.handleOnFilter} />\n        <ContactList\n          contacts={this.getContacts()}\n          onDelete={this.handleDeleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}